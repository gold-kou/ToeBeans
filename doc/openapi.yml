openapi: "3.0.0"
info:
  version: 1.0.0
  title: Toe Beans
  description: API reference of Toe Beans
  license:
    name: MIT
servers:
  - url: http://localhost:80
    description: local
  - url: will be written
    description: production  
paths:
  /login:
    post:
      description: login
      operationId: login
      tags: 
        - user
      requestBody:
        $ref: '#/components/requestBodies/login'
      responses:
        "200":
          description: return token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/token'
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthorized'
        "500":
          $ref: '#/components/responses/internalServerError'
  /logout:
    post:
      description: logout
      operationId: logout
      tags: 
        - user
      security: 
        - bearerAuth: []
      responses:
        "200":
          description: Success Response
          content:
            'application/json':
              schema:
                $ref: '#/components/responses/simpleSuccess' 
        "400":
          $ref: '#/components/responses/unauthorized'
        "500":
          $ref: '#/components/responses/internalServerError'
  /user:
    post:
      description: register user info
      operationId: registerUser
      tags: 
        - user
      requestBody:
        $ref: '#/components/requestBodies/registerUser'
      responses:
        "200":
          description: return token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/token'
        "400":
          $ref: '#/components/responses/badRequest'
        "500":
          $ref: '#/components/responses/internalServerError'
    get:
      description: get a user info
      operationId: getUser
      tags: 
        - user
      security: 
        - bearerAuth: []  
      parameters:
        - name: user_name
          in: query
          description: user name
          required: true
          schema:
            type: string
            example: sample-user
      responses:
        "200":
          description: return a user info
          content:
            application/json:
              schema:
                $ref: '#/components/responses/getUser'
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthorized'  
        "500":
          $ref: '#/components/responses/internalServerError' 
    put:
      description: update user info
      operationId: updateUser
      tags: 
        - user
      security: 
        - bearerAuth: []  
      requestBody:
        $ref: '#/components/requestBodies/updateUser'
      responses:
        "200":
          description: return token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/token'
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthorized'   
        "500":
          $ref: '#/components/responses/internalServerError'  
    delete:
      description: delete user info
      operationId: deleteUser
      tags: 
        - user
      security: 
        - bearerAuth: []  
      responses:
        "200":
          description: Success Response
          content:
            'application/json':
              schema:
                $ref: '#/components/responses/simpleSuccess' 
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthorized'   
        "500":
          $ref: '#/components/responses/internalServerError'
  /posting:
    post:
      description: register posting
      operationId: registerPosting
      tags: 
        - posting
      requestBody:
        $ref: '#/components/requestBodies/registerPosting'
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/responses/registerPosting'
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthorized'  
        "500":
          $ref: '#/components/responses/internalServerError'
    get:
      description: get posting list
      operationId: getPostingList
      tags: 
        - posting
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/responses/getPostingList'
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthorized'  
        "500":
          $ref: '#/components/responses/internalServerError'
  /posting/{id}:
    delete:
      description: delete posting
      operationId: deletePosting
      tags: 
        - posting
      parameters: 
        - name: id
          schema:
            type: integer
            format: int64
          in: path
          required: true
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/simpleSuccess'
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthorized'  
        "500":
          $ref: '#/components/responses/internalServerError'
  /health:
    get:
      description: health check
      operationId: getHealth
      tags: 
        - system
      responses:
        '200':
          description: Success Response
          content:
            'application/json':
              schema:
                $ref: '#/components/responses/simpleSuccess'         
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT 
  # parameters:
  #   access-token:
  #     name: access-token
  #     in: header
  #     required: true
  #     schema:
  #       type: string
  #       format: byte
  requestBodies:
    login:
      description: login
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/login'
    registerUser:
      description: register user
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/registerUser'
    updateUser:
      description: update user
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/updateUser' 
    registerPosting:
      description: register posting
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/registerPosting'
    deletePosting:
      description: delete posting
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/deletePosting'            
  responses:
    getUser:
      description: get user
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/getUser'
    registerPosting:
      description: register posting
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/postingID'
    getPostingList:
      description: get posting list
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/postingList'
    simpleSuccess:
      description: '200'
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/simpleSuccess'
    badRequest:
      description: '400'
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/badRequest'
    unauthorized:
      description: '401'
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/unauthorized'
    notFound:
      description: '404'
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/notFound'
    internalServerError:
      description: '500'
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/internalServerError'
  schemas:
    token:
      type: object
      properties:
        access_token:
          type: string
          description: token to request APIs
          example: rerlkjewlrewi.dsafodniq34noisdf.e68kljsf
      required:
        - access_token  
    login:
      type: object
      properties:
        email:
          type: string
          description: email
          example: sample_user@gmail.com
        password:
          type: string
          description: password
          example: password1234
      required:
        - email
        - password    
    registerUser:
      type: object
      properties:
        email:
          type: string
          description: email
          example: sample_user@gmail.com
        user_name:
          type: string
          description: user_name
          example: sample_user  
        password:
          type: string
          description: password
          example: password1234
      required:
        - email
        - user_name
        - password          
    getUser:
      description: get user
      type: object
      properties:
        user_name:
          description: user name
          type: string
          example: sample_user
      required:
        - user_name
    updateUser:
      type: object
      properties:
        password:
          type: string
          description: password
          example: password1234
        icon:
          description: icon image file of base64 encoded and zipped
          type: string
          format: byte
          example: 'GEsDBBQACAAIAJhjzE4AAAAAAAAAAAAAAAASABAAaU9TIOOBrueUu+WDjzIucG5nVVgMAKTALl1wcQBd9gEUAIy8B'
    registerPosting:
      type: object
      properties:
        title:
          type: string
          description: the title of posting
          example: This is a sample posting.
        image:
          type: string
          format: byte
          description: posting image file of base64 encoded and zipped
          example: 'GEsDBBQACAAIAJhjzE4AAAAAAAAAAAAAAAASABAAaU9TIOOBrueUu+WDjzIucG5nVVgMAKTALl1wcQBd9gEUAIy8B' 
      required:
        - title
        - image
    postingID:
      type: object
      properties:
        id:
          description: posting id
          type: integer
          format: int64
          example: 1
    postingList:
      type: array
      items:
        $ref: '#/components/schemas/posting'
    posting:
      description: posting
      type: object
      properties:
        user_name:
          type: string
          description: user_name
          example: sample_user 
        uploaded_at:
          description: uploaded time with TZ
          type: string
          example: '2020-01-01T18:30:00+09:00'
        title:
          type: string
          description: the title of posting
          example: This is a sample posting.
        image_url:
          type: string
          description: image url
          example: 'https://s3-ap-northeast-1.amazonaws.com/<バケット名>/sample1.jpg'
    deletePosting:
      type: object
      properties:
        id:
          description: posting id
          type: integer
          format: int64
          example: 1
      required:
        - id
    simpleSuccess:
      description: Success
      type: object
      properties:
        status:
          description: status
          type: integer
          format: int64
          example: 200
        message:
          description: message
          type: string
          example: 'success'
      required:
        - status
        - message    
    badRequest:
      description: Bad Reqeust
      type: object
      properties:
        status:
          description: status
          type: integer
          format: int64
          example: 400
        message:
          description: message
          type: string
          example: 'Bad Request'
      required:
        - status
        - message
    unauthorized:
      description: Unauthorized
      type: object
      properties:
        status:
          description: status
          type: integer
          format: int64
          example: 401
        message:
          description: message
          type: string
          example: 'Unauthorized'
      required:
        - status
        - message
    notFound:
      description: Not Found
      type: object
      properties:
        status:
          description: status
          type: integer
          format: int64
          example: 404
        message:
          description: message
          type: string
          example: 'Not Found'
      required:
        - status
        - message
    internalServerError:
      description: Internal Server Error
      type: object
      properties:
        status:
          description: status
          type: integer
          format: int64
          example: 500
        message:
          description: message
          type: string
          example: 'Internal Server Error'
      required:
        - status
        - message    
tags:
  - name: user
    description: user
  - name: posting
    description: posting
  - name: system
    description: system operation