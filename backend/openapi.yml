openapi: "3.0.3"
info:
  version: 1.0.0
  title: Toe Beans
  description: API reference of Toe Beans
servers:
  - url: http://localhost:80
    description: local
  - url: will be written
    description: production
paths:
  /csrf-token:
    get:
      description: get csrf token
      operationId: getCSRFToken
      tags:
        - user
      responses:
        "200":
          $ref: '#/components/responses/getCSRFToken'
        "405":
          $ref: '#/components/responses/notAllowedMethod'
        "500":
          $ref: '#/components/responses/internalServerError'
  /login:
    post:
      description: login
      operationId: login
      tags:
        - user
      requestBody:
        $ref: '#/components/requestBodies/login'
      responses:
        "200":
          $ref: '#/components/responses/login'
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "405":
          $ref: '#/components/responses/notAllowedMethod'
        "500":
          $ref: '#/components/responses/internalServerError'
  /users:
    get:
      description: get a user info
      operationId: getUser
      tags:
        - user
      security:
        - cookieAuth: []
      parameters:
        - name: user_name
          in: query
          description: if not specified, user name in token will be used
          schema:
            type: string
            example: user1
      responses:
        "200":
          $ref: '#/components/responses/getUser'
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthorized'
        "404":
          $ref: '#/components/responses/notFound'
        "405":
          $ref: '#/components/responses/notAllowedMethod'
        "500":
          $ref: '#/components/responses/internalServerError'
  /users/{user_name}:
    post:
      description: register user info
      operationId: registerUser
      tags:
        - user
      parameters:
        - name: user_name
          schema:
            type: string
          in: path
          required: true
          description: user_name
          example: user1
      requestBody:
        $ref: '#/components/requestBodies/registerUser'
      responses:
        "200":
          $ref: '#/components/responses/simpleSuccess'
        "400":
          $ref: '#/components/responses/badRequest'
        "405":
          $ref: '#/components/responses/notAllowedMethod'
        "500":
          $ref: '#/components/responses/internalServerError'
    put:
      description: update user info. Not allowed to guest user.
      operationId: updateUser
      tags:
        - user
      parameters:
        - name: user_name
          schema:
            type: string
          in: path
          required: true
          description: user_name
          example: user1
      security:
        - cookieAuth: []
      requestBody:
        $ref: '#/components/requestBodies/updateUser'
      responses:
        "200":
          $ref: '#/components/responses/simpleSuccess'
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "405":
          $ref: '#/components/responses/notAllowedMethod'
        "409":
          $ref: '#/components/responses/conflict'
        "500":
          $ref: '#/components/responses/internalServerError'
    delete:
      description: delete user info. Not allowed to guest user.
      operationId: deleteUser
      tags:
        - user
      security:
        - cookieAuth: []
      parameters:
        - name: user_name
          schema:
            type: string
          in: path
          required: true
          description: user_name
          example: user1
      responses:
        "200":
          $ref: '#/components/responses/simpleSuccess'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "405":
          $ref: '#/components/responses/notAllowedMethod'
        "409":
          $ref: '#/components/responses/conflict'
        "500":
          $ref: '#/components/responses/internalServerError'
  /user-activation/{user_name}/{activation_key}:
    get:
      description: activate user by email
      operationId: activateUser
      tags:
        - user
      parameters:
        - name: user_name
          schema:
            type: string
          in: path
          required: true
          example: user1
        - name: activation_key
          description: hashed key to activate the user
          schema:
            type: string
          in: path
          required: true
          example: '5e8ff9bf55ba3508199d22e984129be6'
      responses:
        "200":
          $ref: '#/components/responses/simpleSuccess'
        "400":
          $ref: '#/components/responses/badRequest'
        "405":
          $ref: '#/components/responses/notAllowedMethod'
        "500":
          $ref: '#/components/responses/internalServerError'
  /password:
    put:
      description: change password. Not allowed to guest user.
      operationId: changePassword
      tags:
        - user
      security:
        - cookieAuth: []
      requestBody:
        $ref: '#/components/requestBodies/changePassword'
      responses:
        "200":
          $ref: '#/components/responses/simpleSuccess'
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "405":
          $ref: '#/components/responses/notAllowedMethod'
        "500":
          $ref: '#/components/responses/internalServerError'
  /password-reset-email:
    post:
      description: send an email to reset password. Not allowed to guest user.
      operationId: sendPasswordResetEmail
      tags:
        - user
      requestBody:
        $ref: '#/components/requestBodies/sendPasswordResetEmail'
      responses:
        "200":
          $ref: '#/components/responses/simpleSuccess'
        "400":
          $ref: '#/components/responses/badRequest'
        "405":
          $ref: '#/components/responses/notAllowedMethod'
        "500":
          $ref: '#/components/responses/internalServerError'
  /password-reset:
    post:
      description: reset password. Not allowed to guest user.
      operationId: resetPassword
      tags:
        - user
      requestBody:
        $ref: '#/components/requestBodies/resetPassword'
      responses:
        "200":
          $ref: '#/components/responses/simpleSuccess'
        "400":
          $ref: '#/components/responses/badRequest'
        "405":
          $ref: '#/components/responses/notAllowedMethod'
        "500":
          $ref: '#/components/responses/internalServerError'
  /postings:
    post:
      description: register posting
      operationId: registerPosting
      tags:
        - posting
      security:
        - cookieAuth: []
      requestBody:
        $ref: '#/components/requestBodies/registerPosting'
      responses:
        "200":
          $ref: '#/components/responses/simpleSuccess'
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "405":
          $ref: '#/components/responses/notAllowedMethod'
        "500":
          $ref: '#/components/responses/internalServerError'
    get:
      description: get posting list
      operationId: getPostingList
      tags:
        - posting
      security:
        - cookieAuth: []
      parameters:
        - name: since_at
          description: get older data than since_at. If it's first request, the current time is used. If not, the oldest uploaded_at from previous data is used.
          in: query
          required: true
          schema:
            type: string
            example: '2020-01-01T18:00:00+00:00'
          style: form
          explode: true
        - name: limit
          description: the limit number of return items per request
          in: query
          required: true
          schema:
            type: integer
            format: int8
            minimum: 1
            example: 50
          style: form
          explode: true
        - name: user_name
          description: this will be used only when user profile
          in: query
          required: false
          example: user1
          schema:
            type: string
          explode: true
      responses:
        "200":
          $ref: '#/components/responses/getPostings'
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthorized'
        "405":
          $ref: '#/components/responses/notAllowedMethod'
        "500":
          $ref: '#/components/responses/internalServerError'
  /postings/{posting_id}:
    delete:
      description: delete posting.
      operationId: deletePosting
      tags:
        - posting
      security:
        - cookieAuth: []
      parameters:
        - name: posting_id
          schema:
            type: integer
            format: int64
          in: path
          required: true
      responses:
        "200":
          $ref: '#/components/responses/simpleSuccess'
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "405":
          $ref: '#/components/responses/notAllowedMethod'
        "500":
          $ref: '#/components/responses/internalServerError'
  /likes/{posting_id}:
    post:
      description: register like
      operationId: registerLike
      tags:
        - like
      security:
        - cookieAuth: []
      parameters:
        - name: posting_id
          schema:
            type: integer
            format: int64
          in: path
          required: true
      responses:
        "200":
          $ref: '#/components/responses/simpleSuccess'
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "405":
          $ref: '#/components/responses/notAllowedMethod'
        "500":
          $ref: '#/components/responses/internalServerError'
    delete:
      description: delete like
      operationId: deleteLike
      tags:
        - like
      security:
        - cookieAuth: []
      parameters:
        - name: posting_id
          schema:
            type: integer
            format: int64
          in: path
          required: true
      responses:
        "200":
          $ref: '#/components/responses/simpleSuccess'
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "405":
          $ref: '#/components/responses/notAllowedMethod'
        "500":
          $ref: '#/components/responses/internalServerError'
  /comments/{posting_id}:
    post:
      description: register comment. Not allowed to guest user.
      operationId: registerComment
      tags:
        - comment
      security:
        - cookieAuth: []
      parameters:
        - name: posting_id
          schema:
            type: integer
            format: int64
          in: path
          required: true
      requestBody:
        $ref: '#/components/requestBodies/registerComment'
      responses:
        "200":
          $ref: '#/components/responses/simpleSuccess'
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "405":
          $ref: '#/components/responses/notAllowedMethod'
        "500":
          $ref: '#/components/responses/internalServerError'
  /comments:
    get:
      description: get comments
      operationId: getComments
      tags:
        - comment
      security:
        - cookieAuth: []
      parameters:
        - name: posting_id
          in: query
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        "200":
          $ref: '#/components/responses/getComments'
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthorized'
        "405":
          $ref: '#/components/responses/notAllowedMethod'
        "500":
          $ref: '#/components/responses/internalServerError'
  /comments/{comment_id}:
    delete:
      description: delete comment. Not allowed to guest user.
      operationId: deleteComment
      tags:
        - comment
      security:
        - cookieAuth: []
      parameters:
        - name: comment_id
          schema:
            type: integer
            format: int64
          in: path
          required: true
      responses:
        "200":
          $ref: '#/components/responses/simpleSuccess'
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "405":
          $ref: '#/components/responses/notAllowedMethod'
        "500":
          $ref: '#/components/responses/internalServerError'
  /follows/{followed_user_name}:
    post:
      description: register follow
      operationId: registerFollow
      tags:
        - follow
      security:
        - cookieAuth: []
      parameters:
        - name: followed_user_name
          schema:
            type: string
          in: path
          required: true
          example: user1
      responses:
        "200":
          $ref: '#/components/responses/simpleSuccess'
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "405":
          $ref: '#/components/responses/notAllowedMethod'
        "500":
          $ref: '#/components/responses/internalServerError'
    get:
      description: 対象ユーザをフォローしているかどうかを返すAPI
      operationId: getFollowState
      tags:
        - follow
      security:
        - cookieAuth: []
      parameters:
        - name: followed_user_name
          schema:
            type: string
          in: path
          required: true
          example: user1
      responses:
        "200":
          $ref: '#/components/responses/getFollowState'
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "405":
          $ref: '#/components/responses/notAllowedMethod'
        "500":
          $ref: '#/components/responses/internalServerError'  
    delete:
      description: delete follow
      operationId: deleteFollow
      tags:
        - follow
      security:
        - cookieAuth: []
      parameters:
        - name: followed_user_name
          schema:
            type: string
          in: path
          required: true
          example: user1
      responses:
        "200":
          $ref: '#/components/responses/simpleSuccess'
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "405":
          $ref: '#/components/responses/notAllowedMethod'
        "500":
          $ref: '#/components/responses/internalServerError'
  /notifications:
    get:
      description: get notifications
      operationId: getNotifications
      tags:
        - notification
      security:
        - cookieAuth: []
      parameters:
        - name: user_name
          description: user name
          in: query
          required: true
          schema:
            type: string
          explode: true
      responses:
        "200":
          $ref: '#/components/responses/getNotifications'
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "405":
          $ref: '#/components/responses/notAllowedMethod'
        "500":
          $ref: '#/components/responses/internalServerError'
  /notifications/{user_name}:
    put:
      description: update notification as read
      operationId: updateNotification
      tags:
        - notification
      security:
        - cookieAuth: []
      parameters:
        - name: user_name
          schema:
            type: string
          in: path
          required: true
          example: user1
      responses:
        "200":
          $ref: '#/components/responses/simpleSuccess'
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "405":
          $ref: '#/components/responses/notAllowedMethod'
        "500":
          $ref: '#/components/responses/internalServerError'
  /health/liveness:
    get:
      description: health check liveness
      operationId: getHealthLiveness
      tags:
        - system
      responses:
        '200':
          $ref: '#/components/responses/simpleSuccess'
  /health/readiness:
    get:
      description: health check readiness
      operationId: getHealthReadiness
      tags:
        - system
      responses:
        '200':
          $ref: '#/components/responses/simpleSuccess'
components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: id_token
  requestBodies:
    login:
      description: login
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/requestLogin'
    registerUser:
      description: register user
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/requestRegisterUser'
    updateUser:
      description: update user
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/requestUpdateUser'
    changePassword:
      description: change password
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/requestChangePassword'
    sendPasswordResetEmail:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/requestSendPasswordResetEmail'
    registerPosting:
      description: register posting
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/requestRegisterPosting'
    resetPassword:
      description: reset password
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/requestResetPassword'
    registerComment:
      description: register comment
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/requestRegisterComment'
  responses:
    getCSRFToken:
      description: get csrf token
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/responseGetCSRFToken'
    login:
      description: return token
      headers:
        Set-Cookie:
          schema:
            type: string
            example: id_token=abcde12345; Path=/; HttpOnly
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseIDToken'        
    getUser:
      description: get user
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/responseGetUser'
    getPostings:
      description: get postings
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/responseGetPostings'
    getComments:
      description: get comments
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/responseGetComments'
    getFollowState:
      description: get follow state
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/responseGetFollowState'
    getNotifications:
      description: get notifications
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/responseGetNotifications'
    simpleSuccess:
      description: '200'
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/responseSimpleSuccess'
    badRequest:
      description: '400'
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/responseBadRequest'
    unauthorized:
      description: '401'
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/responseUnauthorized'
    forbidden:
      description: '403'
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/responseForbidden'
    notFound:
      description: '404'
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/responseNotFound'
    notAllowedMethod:
      description: '405'
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/responseNotAllowedMethod'
    conflict:
      description: '409'
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/responseConflict'
    internalServerError:
      description: '500'
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/responseInternalServerError'
  schemas:
    requestLogin:
      type: object
      properties:
        email:
          type: string
          description: email
          example: user1@gmail.com
        password:
          type: string
          description: password
          example: Password1234
      required:
        - email
        - password
    requestRegisterUser:
      type: object
      properties:
        email:
          type: string
          description: email
          example: user1@gmail.com
        password:
          type: string
          description: password
          example: Password1234
      required:
        - email
        - user_name
        - password
    requestUpdateUser:
      type: object
      properties:
        password:
          type: string
          description: password
          example: Password1234
        icon:
          description: base64 encoded file
          type: string
          format: byte
          example: 'GEsDBBQACAAIAJhjzE4AAAAAAAAAAAAAAAASABAAaU9TIOOBrueUu+WDjzIucG5nVVgMAKTALl1wcQBd9gEUAIy8B'
        self_introduction:
          type: string
          description: self introduction
          example: 'Hello'
    requestChangePassword:
      type: object
      properties:
        old_password:
          type: string
          description: old password
          example: Password1234
        new_password:
          type: string
          description: new password
          example: Password5678
      required:
        - old_password
        - new_password
    requestSendPasswordResetEmail:
      type: object
      properties:
        email:
          type: string
          description: email
          example: user1@gmail.com
      required:
        - email
    requestResetPassword:
      type: object
      properties:
        user_name:
          description: user name
          type: string
          example: user1
        password:
          type: string
          description: password
          example: Password1234
        password_reset_key:
          type: string
          description: hashed key for password reset
          example: '5e8ff9bf55ba3508199d22e984129be6'
      required:
        - user_name
        - password
        - password_reset_key
    requestRegisterPosting:
      type: object
      properties:
        title:
          type: string
          description: the title of posting
          example: This is a sample posting.
        image:
          type: string
          format: byte
          description: base64 encoded file
          example: 'GEsDBBQACAAIAJhjzE4AAAAAAAAAAAAAAAASABAAaU9TIOOBrueUu+WDjzIucG5nVVgMAKTALl1wcQBd9gEUAIy8B'
      required:
        - title
        - image
    requestRegisterComment:
      description: register comment
      type: object
      properties:
        comment:
          description: comment
          type: string
          example: 'this is a sample comment.'
      required:
        - comment
    responseGetCSRFToken:
      description: get csrf token
      type: object
      properties:
        csrf_token:
          description: csrf token
          type: string
          example: 'AAAAA'
      required:
        - csrf_token
    responseIDToken:
      type: object
      properties:
        id_token:
          type: string
          description: token to request APIs
          example: rerlkjewlrewi.dsafodniq34noisdf.e68kljsf
      required:
        - id_token    
    responseGetUser:
      description: get user
      type: object
      properties:
        user_name:
          description: user name
          type: string
          example: user1
        icon:
          description: icon
          type: string
          example: icon url
        self_introduction:
          description: self introduction
          type: string
          example: 'Hello'
        posting_count:
          description: the total count of posting
          type: integer
          format: int64
          example: 1
        like_count:
          description: the total count of like
          type: integer
          format: int64
          example: 10
        liked_count:
          description: the total count of liked
          type: integer
          format: int64
          example: 20
        follow_count:
          description: the total count of follow
          type: integer
          format: int64
          example: 10
        followed_count:
          description: the total count of followed
          type: integer
          format: int64
          example: 10
        created_at:
          description: the datetime when the account is created
          type: string
          format: date-time
          example: '2020-01-01T00:00:00Z'
      required:
        - user_name
        - icon
        - self_introduction
        - posting_count
        - like_count
        - liked_count
        - follow_count
        - followed_count
        - created_at
    responseGetPostings:
      description: get postings
      type: object
      properties:
        postings:
          description: list of posting
          type: array
          items:
            $ref: '#/components/schemas/responseGetPosting'
      required:
        - postings
    responseGetPosting:
      type: object
      properties:
        posting_id:
          type: integer
          format: int64
          description: id
          example: 1
        user_name:
          type: string
          description: user_name
          example: user1
        uploaded_at:
          description: uploaded datetime with TZ. This means created_at in postings table.
          type: string
          format: date-time
          example: '2020-01-01T00:00:00Z'
        title:
          type: string
          description: the title of posting
          example: This is a sample posting.
        image_url:
          type: string
          description: image url
          example: 'https://s3-ap-northeast-1.amazonaws.c/sample_bucket/sample1.jpg'
        liked_count:
          type: integer
          format: int64
          description: the number of liked
          example: 20
        liked:
          type: boolean
          description: liked or not by request user
          example: false
      required:
        - posting_id
        - user_name
        - uploaded_at
        - title
        - liked_count
        - liked
    responseGetComments:
      description: get comments
      type: object
      properties:
        posting_id:
          description: posting id
          type: integer
          format: int64
          example: 1
        comments:
          description: list of comment
          type: array
          items:
            $ref: '#/components/schemas/responseGetComment'
    responseGetComment:
      type: object
      properties:
        comment_id:
          description: comment id
          type: integer
          format: int64
          example: 1
        user_name:
          type: string
          description: user_name
          example: user1
        commented_at:
          description: commented datetime with TZ. This means created_at in postings table.
          type: string
          format: date-time
          example: '2020-01-01T00:00:00Z'
        comment:
          type: string
          description: the content of comment
          example: This is a sample comment.
      required:
        - comment_id
        - user_name
        - commented_at
        - comment
    responseGetFollowState:
      type: object
      properties:
        is_follow:
          description: follow or not
          type: boolean
          example: true
      required:
        - is_follow
    responseGetNotifications:
      description: get notifications
      type: object
      properties:
        visited_name:
          description: acted user name
          type: string
          example: user1
        actions:
          description: actions
          type: array
          items:
            $ref: '#/components/schemas/responseGetNotification'
    responseGetNotification:
      type: object
      properties:
        visitor_name:
          description: acting user name
          type: string
          example: user1
        posting_id:
          description: only when action is like or comment
          type: integer
          format: int64
          example: 1
        comment_id:
          description: only when action is comment
          type: integer
          format: int64
          example: 1
        action_type:
          description: action type
          type: string
          enum:
            - 'like'
            - 'comment'
            - 'follow'
        created_at:
          description: datetime with TZ
          type: string
          format: date-time
          example: '2020-01-01T00:00:00Z'
      required:
        - visited_name
        - visitor_name
        - action
        - created_at
    responseSimpleSuccess:
      description: Success
      type: object
      properties:
        status:
          description: status
          type: integer
          format: int16
          example: 200
        message:
          description: message
          type: string
          example: 'success'
      required:
        - status
        - message
    responseBadRequest:
      description: Bad Reqeust
      type: object
      properties:
        status:
          description: status
          type: integer
          format: int16
          example: 400
        message:
          description: message
          type: string
          example: 'Bad Request'
      required:
        - status
        - message
    responseUnauthorized:
      description: Unauthorized
      type: object
      properties:
        status:
          description: status
          type: integer
          format: int16
          example: 401
        message:
          description: message
          type: string
          example: 'Unauthorized'
      required:
        - status
        - message
    responseForbidden:
      description: Forbidden
      type: object
      properties:
        status:
          description: status
          type: integer
          format: int16
          example: 403
        message:
          description: message
          type: string
          example: 'Forbidden'
      required:
        - status
        - message
    responseNotFound:
      description: Not Found
      type: object
      properties:
        status:
          description: status
          type: integer
          format: int16
          example: 404
        message:
          description: message
          type: string
          example: 'Not Found'
      required:
        - status
        - message
    responseNotAllowedMethod:
      description: Not Allowed Method
      type: object
      properties:
        status:
          description: status
          type: integer
          format: int16
          example: 405
        message:
          description: message
          type: string
          example: 'Not Allowed Method Error'
      required:
        - status
        - message
    responseConflict:
      description: Conflict Error
      type: object
      properties:
        status:
          description: status
          type: integer
          format: int16
          example: 409
        message:
          description: message
          type: string
          example: 'Conflict Error'
      required:
        - status
        - message
    responseInternalServerError:
      description: Internal Server Error
      type: object
      properties:
        status:
          description: status
          type: integer
          format: int16
          example: 500
        message:
          description: message
          type: string
          example: 'Internal Server Error'
      required:
        - status
        - message
tags:
  - name: user
    description: user
  - name: posting
    description: posting
  - name: like
    description: like
  - name: comment
    description: comment
  - name: follow
    description: follow
  - name: notification
    description: notification
  - name: system
    description: system operation
