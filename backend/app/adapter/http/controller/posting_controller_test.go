package controller

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/http/httptest"
	"strconv"
	"strings"
	"testing"

	httpContext "github.com/gold-kou/ToeBeans/backend/app/adapter/http/context"
	"github.com/gold-kou/ToeBeans/backend/app/adapter/http/helper"

	"github.com/gorilla/mux"

	"github.com/gold-kou/ToeBeans/backend/app/domain/repository"

	"github.com/gold-kou/ToeBeans/backend/app/lib"
	"github.com/gold-kou/ToeBeans/backend/testing/dummy"

	testingHelper "github.com/gold-kou/ToeBeans/backend/testing"
	"github.com/stretchr/testify/assert"
)

var successReqRegisterPosting = `
{
  "title": "This is a sample posting.",
  "image": ""
}
`
var errReqRegisterPostingWithoutImage = `
{
  "title": "This is a sample posting."
}
`
var errReqRegisterPostingWithoutTitle = `
{
  "image": ""
}
`
var errReqRegisterPostingUnderBarTitle = `
{
  "title": "This_is_a_sample_posting.",
  "image": ""
}
`
var errReqRegisterPostingTitleShort = `
{
  "title": "a",
  "image": "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"
}
`
var errReqRegisterPostingDecodeFailure = `
{
  "title": "This is a sample posting.",
  "image": "A"
}
`

var errRespRegisterPostingWithoutImage = `
{
  "status": 400,
  "message": "image: cannot be blank."
}
`
var errRespRegisterPostingWithoutTitle = `
{
  "status": 400,
  "message": "title: cannot be blank."
}
`
var errRespRegisterPostingUnderBarTitle = `
{
  "status": 400,
  "message": "title: must not contain _."
}
`
var errRespRegisterPostingTitleShort = `
{
  "status": 400,
  "message": "title: the length must be between 2 and 255."
}
`
var errRespRegisterPostingDecodeFailure = `
{
  "status": 400,
  "message": "image decode failure"
}
`

func TestRegisterPosting(t *testing.T) {
	type args struct {
		reqBody string
	}
	tests := []struct {
		name       string
		args       args
		method     string
		want       string
		wantStatus int
	}{
		{
			name:       "success",
			args:       args{reqBody: successReqRegisterPosting},
			method:     http.MethodPost,
			want:       testingHelper.RespSimpleSuccess,
			wantStatus: http.StatusOK,
		},
		{
			name:       "error empty image",
			args:       args{reqBody: errReqRegisterPostingWithoutImage},
			method:     http.MethodPost,
			want:       errRespRegisterPostingWithoutImage,
			wantStatus: http.StatusBadRequest,
		},
		{
			name:       "error empty title",
			args:       args{reqBody: errReqRegisterPostingWithoutTitle},
			method:     http.MethodPost,
			want:       errRespRegisterPostingWithoutTitle,
			wantStatus: http.StatusBadRequest,
		},
		{
			name:       "error title contains _",
			args:       args{reqBody: errReqRegisterPostingUnderBarTitle},
			method:     http.MethodPost,
			want:       errRespRegisterPostingUnderBarTitle,
			wantStatus: http.StatusBadRequest,
		},
		{
			name:       "error short title",
			args:       args{reqBody: errReqRegisterPostingTitleShort},
			method:     http.MethodPost,
			want:       errRespRegisterPostingTitleShort,
			wantStatus: http.StatusBadRequest,
		},
		{
			name:       "error decode failure",
			args:       args{reqBody: errReqRegisterPostingDecodeFailure},
			method:     http.MethodPost,
			want:       errRespRegisterPostingDecodeFailure,
			wantStatus: http.StatusBadRequest,
		},
		{
			name:       "not allowed method",
			args:       args{},
			method:     http.MethodHead,
			want:       testingHelper.ErrNotAllowedMethod,
			wantStatus: http.StatusMethodNotAllowed,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			// init
			db := testingHelper.SetupDBTest()
			defer testingHelper.TeardownDBTest(db)
			testingHelper.SetTestTime()
			defer testingHelper.ResetTime()

			// insert dummy data
			userRepo := repository.NewUserRepository(db)
			err := userRepo.Create(context.Background(), &dummy.User1)
			assert.NoError(t, err)
			err = userRepo.Create(context.Background(), &dummy.User2)
			assert.NoError(t, err)

			// http request
			req, err := http.NewRequest(tt.method, "/postings", strings.NewReader(tt.args.reqBody))
			assert.NoError(t, err)
			req = req.WithContext(httpContext.SetTokenUserID(req.Context(), dummy.User1.ID))
			req = req.WithContext(httpContext.SetTokenUserName(req.Context(), dummy.User1.Name))
			resp := httptest.NewRecorder()

			// test target
			PostingController(resp, req)
			assert.NoError(t, err)

			// assert db
			if tt.wantStatus == http.StatusOK {
				postings, err := testingHelper.FindAllPostings(context.Background(), db)
				assert.NoError(t, err)
				dummy.Posting1.CreatedAt = lib.NowFunc()
				dummy.Posting1.UpdatedAt = lib.NowFunc()
				postings[0].CreatedAt = lib.NowFunc()
				postings[0].UpdatedAt = lib.NowFunc()
				assert.Equal(t, dummy.Posting1, postings[0])
			}

			// assert http
			assert.Equal(t, tt.wantStatus, resp.Code)
			respBodyByte, err := ioutil.ReadAll(resp.Body)
			assert.NoError(t, err)
			respBody := string(respBodyByte)
			assert.JSONEq(t, tt.want, respBody)
		})
	}
}

var successRespGetPostings = `
{
  "postings": [
    {
      "posting_id": 1,
      "user_name": "testUser1",
      "uploaded_at": "2020-01-01T00:00:00+09:00",
      "title": "This is a sample posting.",
      "image_url": "http://localhost:9000/toebeans-postings/20200101000000_testUser1",
      "liked_count": 0,
      "liked": false
    }
  ]
}
`
var successRespGetPostingsEmpty = `
{
  "postings": []
}
`
var errRespGetPostingsWithoutSinceAt = `
{
  "status": 400,
  "message": "since_at: cannot be blank."
}
`
var errRespGetPostingsWithoutLimit = `
{
  "status": 400,
  "message": "limit: cannot be blank."
}
`
var errRespGetPostingsNotExistsUserName = `
{
  "status": 400,
  "message": "not exists data error"
}
`

func TestGetPostings(t *testing.T) {
	type args struct {
		sinceAt  string
		limit    string
		userName string
	}
	tests := []struct {
		name       string
		args       args
		method     string
		want       string
		wantStatus int
	}{
		{
			name:       "success",
			args:       args{sinceAt: "2100-01-01T00:00:00+09:00", limit: "50"},
			method:     http.MethodGet,
			want:       successRespGetPostings,
			wantStatus: http.StatusOK,
		},
		{
			name:       "success with user_name",
			args:       args{sinceAt: "2100-01-01T00:00:00+09:00", limit: "50", userName: dummy.User1.Name},
			method:     http.MethodGet,
			want:       successRespGetPostings,
			wantStatus: http.StatusOK,
		},
		{
			name:       "success empty",
			args:       args{sinceAt: "2100-01-01T00:00:00+09:00", limit: "50"},
			method:     http.MethodGet,
			want:       successRespGetPostingsEmpty,
			wantStatus: http.StatusOK,
		},
		{
			name:       "error empty since_at",
			args:       args{limit: "50"},
			method:     http.MethodGet,
			want:       errRespGetPostingsWithoutSinceAt,
			wantStatus: http.StatusBadRequest,
		},
		{
			name:       "error empty limit",
			args:       args{sinceAt: "2020-01-01T00:00:00+09:00"},
			method:     http.MethodGet,
			want:       errRespGetPostingsWithoutLimit,
			wantStatus: http.StatusBadRequest,
		},
		{
			name:       "error not exists user_name",
			args:       args{sinceAt: "2020-01-01T00:00:00+09:00", limit: "50", userName: dummy.User2.Name},
			method:     http.MethodGet,
			want:       errRespGetPostingsNotExistsUserName,
			wantStatus: http.StatusBadRequest,
		},
		{
			name:       "not allowed method",
			args:       args{},
			method:     http.MethodHead,
			want:       testingHelper.ErrNotAllowedMethod,
			wantStatus: http.StatusMethodNotAllowed,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			// init
			db := testingHelper.SetupDBTest()
			defer testingHelper.TeardownDBTest(db)
			testingHelper.SetTestTime()
			defer testingHelper.ResetTime()

			// insert dummy data
			userRepo := repository.NewUserRepository(db)
			err := userRepo.Create(context.Background(), &dummy.User1)
			assert.NoError(t, err)
			if tt.want != successRespGetPostingsEmpty {
				postingRepo := repository.NewPostingRepository(db)
				err = postingRepo.Create(context.Background(), &dummy.Posting1)
				assert.NoError(t, err)
				err = testingHelper.UpdateNow(db, "postings")
				assert.NoError(t, err)
			}

			// http request
			var req *http.Request
			if tt.args.userName == "" {
				req, err = http.NewRequest(tt.method, fmt.Sprintf("/postings?since_at=%s&limit=%s", tt.args.sinceAt, tt.args.limit), nil)
			} else {
				req, err = http.NewRequest(tt.method, fmt.Sprintf("/postings?since_at=%s&limit=%s&user_name=%s", tt.args.sinceAt, tt.args.limit, tt.args.userName), nil)
			}
			assert.NoError(t, err)
			req = req.WithContext(httpContext.SetTokenUserName(req.Context(), dummy.User1.Name))
			resp := httptest.NewRecorder()

			// test target
			PostingController(resp, req)
			assert.NoError(t, err)

			// assert http
			assert.Equal(t, tt.wantStatus, resp.Code)
			respBodyByte, err := ioutil.ReadAll(resp.Body)
			assert.NoError(t, err)
			respBody := string(respBodyByte)
			assert.JSONEq(t, tt.want, respBody)
		})
	}
}

var errRespDeletePostingWithoutPostingID = `
{
  "status": 400,
  "message": "cannot be blank"
}
`
var errRespDeletePostingNotExistingID = `
{
  "status": 400,
  "message": "not exists data error"
}
`

func TestDeletePosting(t *testing.T) {
	type args struct {
		postingID int64
	}
	tests := []struct {
		name       string
		args       args
		method     string
		want       string
		wantStatus int
	}{
		{
			name:       "success",
			args:       args{postingID: dummy.Posting1.ID},
			method:     http.MethodDelete,
			want:       testingHelper.RespSimpleSuccess,
			wantStatus: http.StatusOK,
		},
		{
			name:       "error empty posting_id",
			args:       args{},
			method:     http.MethodDelete,
			want:       errRespDeletePostingWithoutPostingID,
			wantStatus: http.StatusBadRequest,
		},
		{
			name:       "error not existing posting_id",
			args:       args{postingID: 99999},
			method:     http.MethodDelete,
			want:       errRespDeletePostingNotExistingID,
			wantStatus: http.StatusBadRequest,
		},
		{
			name:       "error forbidden guest user",
			args:       args{postingID: dummy.Posting1.ID},
			method:     http.MethodDelete,
			want:       testingHelper.ErrForbidden,
			wantStatus: http.StatusForbidden,
		},
		{
			name:       "not allowed method",
			args:       args{},
			method:     http.MethodHead,
			want:       testingHelper.ErrNotAllowedMethod,
			wantStatus: http.StatusMethodNotAllowed,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			// init
			db := testingHelper.SetupDBTest()
			defer testingHelper.TeardownDBTest(db)
			testingHelper.SetTestTime()
			defer testingHelper.ResetTime()

			// insert dummy data
			userRepo := repository.NewUserRepository(db)
			postingRepo := repository.NewPostingRepository(db)
			err := userRepo.Create(context.Background(), &dummy.User1)
			assert.NoError(t, err)
			err = postingRepo.Create(context.Background(), &dummy.Posting1)
			assert.NoError(t, err)

			// http request
			req, err := http.NewRequest(tt.method, fmt.Sprintf("/postings/%v", tt.args.postingID), nil)
			assert.NoError(t, err)
			vars := map[string]string{"posting_id": strconv.Itoa(int(tt.args.postingID))}
			req = mux.SetURLVars(req, vars)
			if tt.name == "error forbidden guest user" {
				req = req.WithContext(httpContext.SetTokenUserName(req.Context(), helper.GuestUserName))
			} else {
				req = req.WithContext(httpContext.SetTokenUserName(req.Context(), dummy.User1.Name))
			}
			resp := httptest.NewRecorder()

			// test target
			PostingController(resp, req)
			assert.NoError(t, err)

			// assert db
			if tt.wantStatus == http.StatusOK {
				postings, err := testingHelper.FindAllPostings(context.Background(), db)
				assert.NoError(t, err)
				assert.Equal(t, 0, len(postings))
			}

			// assert http
			assert.Equal(t, tt.wantStatus, resp.Code)
			respBodyByte, err := ioutil.ReadAll(resp.Body)
			assert.NoError(t, err)
			respBody := string(respBodyByte)
			assert.JSONEq(t, tt.want, respBody)
		})
	}
}
